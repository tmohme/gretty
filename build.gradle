buildscript {
  project.ext {
    if (has('privateRepoDir')) {
      privateRepoDir = privateRepoDir instanceof File ? privateRepoDir.path : privateRepoDir.toString()
      if (!new File(privateRepoDir).isAbsolute())
        privateRepoDir = new File(projectDir, privateRepoDir).canonicalPath
    } else
      privateRepoDir = new File(project.buildDir, 'privateRepo').canonicalPath
  }

  repositories {
    maven {
      url "file:$privateRepoDir"
    }
    jcenter()
    maven {
      url 'https://dl.bintray.com/content/noamt/gradle-plugins'
    }
  }

  dependencies {
    classpath 'org.apache.commons:commons-lang3:3.4'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.1'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.3'
    classpath "org._10ne.gradle:rest-gradle-plugin:0.4.2"
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  }
}

import groovyx.net.http.ContentType

plugins {
  id 'base'
  id 'maven-publish'
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: "org.tenne.rest"

ext {
  project_website = "https://github.com/${developerId}/${projectId}"
  project_scm = "https://github.com/${developerId}/${projectId}.git"
  license_url = "https://raw.github.com/${developerId}/${projectId}/master/LICENSE"

  if (!has('bintrayUser'))
    bintrayUser = ''

  if (!has('bintrayKey'))
    bintrayKey = ''

  if (!has('bintrayRepo'))
    bintrayRepo = ''

  if (!has('bintrayPackage'))
    bintrayPackage = ''

  bintrayGpgRequestBody = [:]

  if (!has('bintraySubject'))
    bintraySubject = ''
  else
    bintrayGpgRequestBody.put('subject', bintraySubject)

  if (!has( 'gpgPassphrase'))
    gpgPassphrase = ''
  else
    bintrayGpgRequestBody.put('passphrase', gpgPassphrase)

  if (!has('gpgKey'))
    gpgKey = ''
  else
    bintrayGpgRequestBody.put('private_key', gpgKey)

  if (!has('bintrayDryRun'))
    bintrayDryRun = false

  if (!has('artifactory_contextUrl'))
    artifactory_contextUrl = 'https://oss.jfrog.org/artifactory'
}

if (!bintrayDryRun)
  task bintraySign(type: org._10ne.gradle.rest.RestTask) {
    description 'Push to bintray and sign it.'
    httpMethod = 'post'
    uri = "https://api.bintray.com/gpg/${project.bintrayUser}/${project.bintrayRepo}/${project.bintrayPackage}/versions/${project.version}"
    username = project.bintrayUser
    password = project.bintrayKey
    requestBody = project.bintrayGpgRequestBody
    contentType = ContentType.JSON
  }

task buildIntegrationTests(type: GradleBuild) {
  dir = file('integrationTests')
  tasks = [ 'build' ]
  project.tasks.build.finalizedBy it
  onlyIf { !project.tasks.build.getState().getFailure() }
}

task testAll(dependsOn: tasks.build)

task testAllIntegrationTests(type: GradleBuild) {
  dependsOn buildIntegrationTests
  dir = file('integrationTests')
  tasks = [ 'testAll' ]
  startParameter.projectProperties = [:]
  if (project.hasProperty('geckoDriverPlatform')) {
    startParameter.projectProperties.put('geckoDriverPlatform', project.geckoDriverPlatform)
  }
  if (project.hasProperty('geckoDriverVersion')) {
    startParameter.projectProperties.put('geckoDriverVersion', project.geckoDriverVersion)
  }
  if (project.hasProperty('seleniumVersion')) {
    startParameter.projectProperties.put('seleniumVersion', project.seleniumVersion)
  }
  if (project.hasProperty('gebVersion')) {
    startParameter.projectProperties.put('gebVersion', project.gebVersion)
  }
  if (project.hasProperty('testAllContainers')) {
    startParameter.projectProperties.put('testAllContainers', project.testAllContainers)
  }
  project.tasks.testAll.finalizedBy it
  onlyIf { !project.tasks.testAll.getState().getFailure() }
}

task cleanIntegrationTests(type: GradleBuild) {
  dir = file('integrationTests')
  tasks = [ 'clean' ]
  project.tasks.clean.dependsOn it
}

wrapper {
    gradleVersion = '4.8'
    distributionType = Wrapper.DistributionType.ALL
}

artifactory {
  contextUrl = artifactory_contextUrl
  publish {
    repository {
      if (project.version.endsWith('-SNAPSHOT'))
        repoKey = 'oss-snapshot-local'
      else
        repoKey = 'oss-release-local'
      username = project.bintrayUser
      password = project.bintrayKey
    }
  }
  resolve {
    repository {
      repoKey = 'repo'
    }
  }
}

ext.libs = [
  groovy_all: [
    "org.codehaus.groovy:groovy:$groovy_version",
    "org.codehaus.groovy:groovy-groovysh:$groovy_version",
    "org.codehaus.groovy:groovy-json:$groovy_version",
    "org.codehaus.groovy:groovy-nio:$groovy_version",
    "org.codehaus.groovy:groovy-macro:$groovy_version",
    "org.codehaus.groovy:groovy-templates:$groovy_version",
    "org.codehaus.groovy:groovy-xml:$groovy_version",
  ],
  spock: dependencies.create("org.spockframework:spock-core:$spock_version") {
    exclude module: "groovy-all"
  }
]